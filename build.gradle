/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */
apply plugin: 'java'
apply plugin: 'application'

version = "0.22"

// compile java version
sourceCompatibility = 1.8
targetCompatibility = 1.8


def defaultEncoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = defaultEncoding
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
	jcenter()
	mavenCentral()
	maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/" }
	flatDir { dirs 'libs' }
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
	compile group: 'ch.qos.logback', name : 'logback-classic', version: '1.2.3'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-csv
	compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
	// https://mvnrepository.com/artifact/commons-io/commons-io
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	// https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
	// スクレイピング
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.14.0'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-htmlunit-driver', version: '2.52.0'
	// 形態素解析
	compile group: 'org.glassfish', name: 'javax.json', version: '1.1'
	compile name: 'sudachi-0.1.0'
	// javamail
    compile 'javax.mail:javax.mail-api:1.6.2'
    compile 'com.sun.mail:javax.mail:1.6.2'
    // twitter
	// compile name: "twitter4a-core-4.1.0"
	compile 'org.twitter4j:twitter4j-core:[4.0,)'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task myTaskProperty {
	// OS 判定
	ant.condition(property: "os", value: "windows") { os(family: "windows") }
	ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

    ext.mainClassName = "jp.comfycolor.hibicomi.HibicomiMain"
    ext.distRrootDir = getProperty("${ant.properties['os']}.distRrootDir")
    ext.dataRootDir = getProperty("${ant.properties['os']}.dataRootDir")
    ext.driverPath = getProperty("${ant.properties['os']}.driverPath")
    ext.jsonCommonName = "commonSetting.json"
    ext.jsonFreeNormalSettingName = "freeNormalSetting.json"
    ext.jsonGenreNormalSettingName = "genreNormalSetting.json"
    ext.jsonFreeTwitterSettingName = "freeTwitterSetting.json"
    ext.jsonFreeTwitterBLSettingName = "freeTwitterBLSetting.json"
}


// -------------------------------------------

task runFreeNormal (type: JavaExec, dependsOn: classes){
	println "runFreeNormal ----------------------------------------"

	args (myTaskProperty.distRrootDir, myTaskProperty.dataRootDir, myTaskProperty.jsonCommonName, myTaskProperty.jsonFreeNormalSettingName, myTaskProperty.driverPath )

    main = myTaskProperty.mainClassName
	classpath sourceSets.main.runtimeClasspath

}

task runGenreNormal (type: JavaExec, dependsOn: classes){
	println "runGenreNormal ----------------------------------------"

	args (myTaskProperty.distRrootDir, myTaskProperty.dataRootDir, myTaskProperty.jsonCommonName, myTaskProperty.jsonGenreNormalSettingName, myTaskProperty.driverPath)

    main = myTaskProperty.mainClassName
	classpath sourceSets.main.runtimeClasspath

}

task runFreeTwitter (type: JavaExec, dependsOn: classes){
	println "runFreeTwitter ----------------------------------------"

	args (myTaskProperty.distRrootDir, myTaskProperty.dataRootDir, myTaskProperty.jsonCommonName, myTaskProperty.jsonFreeTwitterSettingName, myTaskProperty.driverPath )

    main = myTaskProperty.mainClassName
	classpath sourceSets.main.runtimeClasspath

}

task runFreeTwitterBL (type: JavaExec, dependsOn: classes){
	println "runFreeTwitterBL ----------------------------------------"

	args (myTaskProperty.distRrootDir, myTaskProperty.dataRootDir, myTaskProperty.jsonCommonName, myTaskProperty.jsonFreeTwitterBLSettingName, myTaskProperty.driverPath )

    main = myTaskProperty.mainClassName
	classpath sourceSets.main.runtimeClasspath

}

task createFreeNormalRunApp(type: CreateStartScripts) {
	println "createFreeNormalRunApp ----------------------------------------"

    mainClassName = myTaskProperty.mainClassName
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'FreeNormalApp'

	// JAVA引数にlogback用変数を設定(後で置換するので仮値)
	applicationDefaultJvmArgs = ["-DUSER_HOME=MY_APP_HOME", "-Xms1024m", "-Xmx2048m"]

	doLast {
		// Unix用コマンド
		unixScript.text = unixScript.text
								.replace('MY_APP_HOME', '\$APP_HOME')
								.replace('\$JAVA_OPTS', '\$JAVA_OPTS -DUSER_HOME="\$APP_HOME"')
								.replace('"\$APP_ARGS"', '"\$APP_HOME" '+ getProperty("unix.dataRootDir") +' '+ myTaskProperty.jsonCommonName +' '+ myTaskProperty.jsonFreeNormalSettingName +' '+ getProperty("unix.driverPath") +' "\$APP_ARGS"')

		// Windows用コマンド
		windowsScript.text = windowsScript.text
								.replace('MY_APP_HOME', '%APP_HOME%')
								.replace('%CMD_LINE_ARGS%', '"%APP_HOME%" '+ getProperty("windows.dataRootDir") +' '+ myTaskProperty.jsonCommonName +' '+ myTaskProperty.jsonFreeNormalSettingName +' '+ getProperty("windows.driverPath") +' "%CMD_LINE_ARGS%"')
	}
}

task createFreeTwitterRunApp(type: CreateStartScripts) {
	println "createFreeTwitterRunApp ----------------------------------------"

    mainClassName = myTaskProperty.mainClassName
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'FreeTwitterApp'

	// JAVA引数にlogback用変数を設定(後で置換するので仮値)
	applicationDefaultJvmArgs = ["-DUSER_HOME=MY_APP_HOME", "-Xms1024m", "-Xmx2048m"]

	doLast {
		// Unix用コマンド
		unixScript.text = unixScript.text
								.replace('MY_APP_HOME', '\$APP_HOME')
								.replace('\$JAVA_OPTS', '\$JAVA_OPTS -DUSER_HOME="\$APP_HOME"')
								.replace('"\$APP_ARGS"', '"\$APP_HOME" '+ getProperty("unix.dataRootDir") +' '+ myTaskProperty.jsonCommonName +' '+ myTaskProperty.jsonFreeTwitterSettingName +' '+ getProperty("unix.driverPath") +' "\$APP_ARGS"')

		// Windows用コマンド
		windowsScript.text = windowsScript.text
								.replace('MY_APP_HOME', '%APP_HOME%')
								.replace('%CMD_LINE_ARGS%', '"%APP_HOME%" '+ getProperty("windows.dataRootDir") +' '+ myTaskProperty.jsonCommonName +' '+ myTaskProperty.jsonFreeTwitterSettingName +' '+ getProperty("windows.driverPath") +' "%CMD_LINE_ARGS%"')
	}
}

task createFreeTwitterBLRunApp(type: CreateStartScripts) {
	println "createFreeTwitterBLRunApp ----------------------------------------"

    mainClassName = myTaskProperty.mainClassName
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'FreeTwitterBLApp'

	// JAVA引数にlogback用変数を設定(後で置換するので仮値)
	applicationDefaultJvmArgs = ["-DUSER_HOME=MY_APP_HOME", "-Xms1024m", "-Xmx2048m"]

	doLast {
		// Unix用コマンド
		unixScript.text = unixScript.text
								.replace('MY_APP_HOME', '\$APP_HOME')
								.replace('\$JAVA_OPTS', '\$JAVA_OPTS -DUSER_HOME="\$APP_HOME"')
								.replace('"\$APP_ARGS"', '"\$APP_HOME" '+ getProperty("unix.dataRootDir") +' '+ myTaskProperty.jsonCommonName +' '+ myTaskProperty.jsonFreeTwitterBLSettingName +' '+ getProperty("unix.driverPath") +' "\$APP_ARGS"')

		// Windows用コマンド
		windowsScript.text = windowsScript.text
								.replace('MY_APP_HOME', '%APP_HOME%')
								.replace('%CMD_LINE_ARGS%', '"%APP_HOME%" '+ getProperty("windows.dataRootDir") +' '+ myTaskProperty.jsonCommonName +' '+ myTaskProperty.jsonFreeTwitterBLSettingName +' '+ getProperty("windows.driverPath") +' "%CMD_LINE_ARGS%"')
	}
}

mainClassName = myTaskProperty.mainClassName

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(createFreeNormalRunApp)
    from(createFreeTwitterRunApp)
    from(createFreeTwitterBLRunApp)
    fileMode = 0755
}
